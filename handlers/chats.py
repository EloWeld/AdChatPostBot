
import asyncio
import json
import random
import traceback
from uuid import uuid4
from aiogram import Bot, Dispatcher, types
import aiogram
import loguru
import pyrogram
from etc.keyboards import Keyboards
from etc.utils import check_html_tags, download_chat_photo, userbotSessionToPyroClient
from loader import *
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher import FSMContext
from aiogram.types import *
from models import AutopostSlot, TgUser, UserbotSession
from slotsThreads import slot_updated
from states import ChangeSlotStates
from pyrogram.client import Client
from pyrogram.errors.exceptions.bad_request_400 import PeerIdInvalid

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Ç–∞–º–∏ —Å–ª–æ—Ç–æ–≤
@dp.callback_query_handler(text_contains="|chats", state="*")
async def _(c: CallbackQuery, state: FSMContext, user: TgUser):
    global threads
    actions = c.data.split(":")[1:]
    slot: AutopostSlot = AutopostSlot.objects.get({"_id": actions[1]})

    if actions[0] == "delete_slot_chat":
        if actions[-1] == "!":
            chat_id = actions[2]
            del slot.chats[chat_id]
            
            func = c.message.edit_caption if c.message.photo else c.message.edit_text
            await func(f"üóëÔ∏è –ß–∞—Ç —É–¥–∞–ª—ë–Ω –∏–∑ —Ä–∞—Å—Å—ã–ª–∫–∏")
            slot.save()
            return
        

@dp.message_handler(state=ChangeSlotStates.chats)
async def _(message: types.Message, state: FSMContext):
    global threads
    chat_ids = [x.strip() for x in message.text.replace('\n', ' ').replace(';', ' ').replace(',', ' ').split()]
    stateData = await state.get_data()
    
    slot: AutopostSlot = AutopostSlot.objects.raw(
        {"_id": stateData['editing_slot_id']}).first()
    counter = 0
    if len(slot.ubots) == 0:
            await message.answer('‚ö†Ô∏è –ü–æ–¥–∫–ª—é—á–∏—Ç–µ —é–∑–µ—Ä–±–æ—Ç–æ–≤ –∫ —Å–ª–æ—Ç—É, —á—Ç–æ–±—ã –æ–Ω–∏ –≤–æ—à–ª–∏ –≤ –≥—Ä—É–ø–ø—ã! –°–µ–π—á–∞—Å —é–∑–µ—Ä–±–æ—Ç—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∏ –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç –Ω–µ –ø–æ–ª—É—á–∏—Ç—å—Å—è')
    else:
        for chat_identifier in chat_ids:
            for slot_chat_id, slot_chat in slot.chats.items():
                if chat_identifier.replace('@', '') in [str(slot_chat['username'])]:
                    await message.answer(f"‚ö†Ô∏è –ß–∞—Ç <code>{chat_identifier}</code> –±—ã–ª —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤" )
                    continue
            if '-100' in chat_identifier:
                chat_identifier = int(chat_identifier)
            for ubot in slot.ubots:
                ubot: UserbotSession = ubot
                client: Client = userbotSessionToPyroClient(ubot)
                
                await client.start()
                try:
                    chat = await client.get_chat(chat_identifier)
                except Exception as e:
                    loguru.logger.error(e)
                    chat = None
                if chat is None or isinstance(chat, pyrogram.types.ChatPreview):
                    # If chat is None - try to join
                    try:
                        chat = await client.get_chat(chat_identifier)
                        await message.answer(f"‚úÖ –Æ–∑–µ—Ä–±–æ—Ç <code>{ubot.id}</code> –∑–∞—à—ë–ª –≤ —á–∞—Ç <code>{chat_identifier}</code>")
                    except PeerIdInvalid:
                        await message.answer(f"‚ö†Ô∏è –Æ–∑–µ—Ä–±–æ—Ç <code>{ubot.id}</code> –Ω–µ —Å–º–æ–≥ –∑–∞–π—Ç–∏ –≤ —á–∞—Ç <code>{chat_identifier}</code> —Ç–∞–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ —Ç–∞–∫–æ–π —á–∞—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                    except Exception as e:
                        print(f"Failed to join the group: {e}")
                        await message.answer(f"‚ö†Ô∏è –Æ–∑–µ—Ä–±–æ—Ç <code>{ubot.id}</code> –Ω–µ —Å–º–æ–≥ –∑–∞–π—Ç–∏ –≤ —á–∞—Ç <code>{chat_identifier}</code>. –û—à–∏–±–∫–∞: <b>{e}</b")
                await client.stop()
                # If it is still None - error
                if chat is None:
                    await message.answer(f"‚ö†Ô∏è –ß–∞—Ç <code>{chat_identifier}</code> –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω —É —é–∑–µ—Ä–±–æ—Ç–∞ <code>{ubot.name}</code> | <code>{ubot.login}</code>, —á–∞—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω")
                    continue
                if chat is None:
                    await message.answer(f"‚ö†Ô∏è –í —á–∞—Ç–µ <code>{chat_identifier}</code> —é–∑–µ—Ä–±–æ—Ç <code>{ubot.name}</code> | <code>{ubot.login}</code> –Ω–µ –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, —á–∞—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω")
                    continue
                slot.chats[str(chat.id)] = json.loads(json.dumps(chat.__dict__, ensure_ascii=False, default=str))
                counter += 1
            
    await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {counter} —á–∞—Ç–æ–≤!")
    slot.save()
            
    await message.answer("üí¨ –ú–µ–Ω—é –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏",
                                  reply_markup=Keyboards.SlotChats.seeSlotChats(slot))
    await state.finish()
    await slot_updated(slot)
