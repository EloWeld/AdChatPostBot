
import asyncio
import random
import traceback
from uuid import uuid4
from aiogram import Bot, Dispatcher, types
import aiogram
import loguru
from etc.keyboards import Keyboards
from loader import *
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher import FSMContext
from aiogram.types import *
from models import AutopostSlot, TgUser, UserbotSession
from states import ChangeSlotStates


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–ª–æ—Ç–µ
async def sendSlot(msg: Message, slot: AutopostSlot, edit=False):
    func = msg.answer if not edit else msg.edit_text

    schdeule_text = "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ" if len(slot.schedule) == 0 else '\n'.join(f"<code>{x['min']}-{x['max']}</code>" for x in slot.schedule)
    postings_text = "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ" if len(slot.postings) == 0 else '\n'.join(f"–°–æ–æ–±—â–µ–Ω–∏–µ #{i}: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ <code>{x['sent_count']}</code> —Ä–∞–∑" for i, x in enumerate(slot.postings))

    await func(f"{slot.emoji} –°–ª–æ—Ç <b>{slot.name}</b> <code>#{slot.id}</code>\n\n"
               f"<b>üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n"
               f"‚ñ´Ô∏è –Æ–∑–µ—Ä–±–æ—Ç–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ: <code>{len(slot.ubots)}</code> —à—Ç.\n"
               f"‚ñ´Ô∏è –ß–∞—Ç–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ: <code>{len(slot.chats)}</code> —à—Ç.\n"
               f"‚ñ´Ô∏è –°–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: <code>{len(slot.postings)}</code> —à—Ç.\n"
               f"‚ñ´Ô∏è –°—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã: <code>{slot.get_verbose_status()}</code>\n\n"
               f"<b>üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</b>\n"
               f"{schdeule_text}\n\n"
               f"<b>üíå –ö–æ–Ω—Ç–µ–Ω—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n"
               f"{postings_text}\n\n", 
               reply_markup=Keyboards.Slots.editSlot(slot))

async def sendSlotsMenu(msg: Message, edit=False):
    func = msg.answer if not edit else msg.edit_text
    slots: AutopostSlot = AutopostSlot.objects.all()
    await func("üóÉÔ∏è –ú–µ–Ω—é —Å–ª–æ—Ç–æ–≤", reply_markup=Keyboards.Slots.main(slots))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–ª–æ—Ç–∞–º–∏
@dp.callback_query_handler(text_contains="|slot_menu", state="*")
async def _(c: CallbackQuery, state: FSMContext, user: TgUser):
    actions = c.data.split(":")[1:]

    if actions[0] == "delete_slot":
        await c.answer()
        slot: AutopostSlot = AutopostSlot.objects.get({'_id': actions[2]})
        if actions[-1] == "!":
            await c.message.answer(f"üóëÔ∏è –°–ª–æ—Ç <b>{slot.name}</b> <code>#{slot.id}</code> —É–¥–∞–ª—ë–Ω")
            slot.delete()
            await sendSlotsMenu(c.message)
            return
        await c.message.answer(f"–£–¥–ª–∞–∏—Ç—å —Å–ª–æ—Ç <b>{slot.name}</b>‚ùî", reply_markup=Keyboards.Popup(f"|slot_menu:delete_slot:{slot.id}:!"))
        
    if actions[0] == "turn":
        slot: AutopostSlot = AutopostSlot.objects.get({'_id': actions[1]})
        if slot.status != 'banned':
            if slot.status == 'inactive' and len(slot.ubots) == 0:
                await c.answer("üò¢ –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —é–∑–µ—Ä–±–æ—Ç–∞", show_alert=True)
                return
            if slot.status == 'inactive' and len(slot.postings) == 0:
                await c.answer("üò¢ –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏", show_alert=True)
                return
            if slot.status == 'inactive' and len(slot.schedule) == 0:
                await c.answer("üò¢ –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏", show_alert=True)
                return
            slot.status = 'inactive' if slot.status == 'active' else 'active'
            slot.save()
            await sendSlot(c.message, slot, edit=True)
                
    if actions[0] == "change":
        slot = AutopostSlot.objects.get({"_id": actions[2]})
        if actions[1] == "name":
            await c.answer()
            xm = await c.message.edit_text(f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ª–æ—Ç–∞:", reply_markup=Keyboards.back(f"|slots:see:{slot.id}"))
            await state.update_data(editing_slot_id=slot.id, xm=xm)
            await ChangeSlotStates.name.set()
        
    if actions[0] == "schedule":
        slot = AutopostSlot.objects.get({"_id": actions[1]})
        xm = await c.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –≤–∏–¥–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º —á–µ—Ä–µ–∑ <b>\";\"</b> –∏–ª–∏ <b>\" \"</b>\n\n–ü—Ä–∏–º–µ—Ä: <code>10:00-12:00;14:35-15:40;21:00-23:00</code>",
                                  reply_markup=Keyboards.back(f"|slots:see:{slot.id}"))
        await state.update_data(editing_slot_id=slot.id, xm=xm)
        await ChangeSlotStates.schedule.set()
        
        
    if actions[0] == "postings":
        await c.answer("–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞")
        
    if actions[0] == "ubots":
        slot = AutopostSlot.objects.get({"_id": actions[1]})
        all_userbots = UserbotSession.objects.all()
        await c.message.edit_text("ü§ñ –í—ã–±–µ—Ä–∏—Ç–µ —é–∑–µ—Ä–±–æ—Ç–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —ç—Ç–æ–º —Å–ª–æ—Ç–µ",
                                  reply_markup=Keyboards.Slots.chooseUserbots(all_userbots, slot.ubots, slot))
        await state.update_data(slot_id=slot.id, ubots=slot.ubots)
        await ChangeSlotStates.schedule.set()
        
    ####################
    if actions[0] == "choose_ubots":
        stateData = await state.get_data()
        ubots: list = stateData.get('ubots', [])
        
        if actions[1] == 'done':
            await c.answer()
                
            slot: AutopostSlot = AutopostSlot.objects.get({"_id": stateData['slot_id']})
            slot.ubots = ubots
            slot.save()
            
            await sendSlot(c.message, slot, True)
            await state.finish()
                
            await c.answer()
        else:
            ub_id = c.data.split(':')[2]
            slot: AutopostSlot = None
            if 'slot_id' in stateData:
                slot: AutopostSlot = AutopostSlot.objects.get({"_id": stateData['slot_id']})
            if ub_id in ubots:
                ubots.remove(ub_id)
            else:
                ubots.append(ub_id)
            await state.update_data(ubots=ubots)
            
            userbots = UserbotSession.objects.all()
            await c.message.edit_reply_markup(Keyboards.Slots.chooseUserbots(userbots, ubots, slot))
            
            
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–ª–æ—Ç–∞–º–∏
@dp.callback_query_handler(text_contains="|slots", state="*")
async def _(c: CallbackQuery, state: FSMContext, user: TgUser):
    action = c.data.split(":")[1]

    if action == "main":
        if state:
            await state.finish()
        await sendSlotsMenu(c.message, edit=True)

    if action == "new":
        await c.answer()
        slot = AutopostSlot(id=str(uuid4())[:15],
                            owner_id=user.id,
                            name=f"{fake.word().capitalize()}_{fake.word()}",
                            emoji=random.choice(
                                ["üî¥", "üü†", "üü°", "üü¢", "üîµ", "üü£", "üü§", "‚ö´", "‚ö™", "üü†"])
                            )
        slot.save()

        slots: AutopostSlot = AutopostSlot.objects.all()
        await c.message.edit_text("üóÉÔ∏è –ú–µ–Ω—é —Å–ª–æ—Ç–æ–≤", reply_markup=Keyboards.Slots.main(slots))

    if action == "see":
        if state:
            await state.finish()
        slot: AutopostSlot = AutopostSlot.objects.get(
            {'_id': c.data.split(':')[2]})
        await sendSlot(c.message, slot, True)


@dp.message_handler(state=ChangeSlotStates.name)
async def _(message: types.Message, state: FSMContext):
    val = message.text
    stateData = await state.get_data()
    
    slot = AutopostSlot.objects.raw(
        {"_id": stateData['editing_slot_id']}).first()
    setattr(slot, 'name', val)
    slot.save()

    await stateData['xm'].edit_text(f"‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ <code>{message.text}</code>!")
    await message.delete()

    await sendSlot(message, slot)
    await state.finish()



@dp.message_handler(state=ChangeSlotStates.schedule)
async def _(message: types.Message, state: FSMContext):
    val = message.text
    stateData = await state.get_data()
    
    slot = AutopostSlot.objects.raw(
        {"_id": stateData['editing_slot_id']}).first()
    
    slot.schedule = [dict(min=x.split('-')[0], max=x.split('-')[1]) for x in val.replace(';', ' ').replace('  ', ' ').strip().split()]
    slot.save()

    await stateData['xm'].edit_text(f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ <code>{val}</code>!")
    await message.delete()

    await sendSlot(message, slot)
    await state.finish()
