
import asyncio
import json
import random
import traceback
from uuid import uuid4
from aiogram import Bot, Dispatcher, types
import aiogram
import loguru
import pyrogram
from etc.keyboards import Keyboards
from etc.utils import check_html_tags, download_chat_photo
from loader import *
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher import FSMContext
from aiogram.types import *
from models import AutopostSlot, TgUser, UserbotSession
from states import ChangeSlotStates


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–ª–æ—Ç–µ
async def sendSlot(msg: Message, slot: AutopostSlot, edit=False):
    func = msg.answer if not edit else msg.edit_text

    schdeule_text = "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ" if len(slot.schedule) == 0 else '\n'.join(f"<code>{x['min']}-{x['max']}</code>" for x in slot.schedule)
    postings_text = "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ" if len(slot.postings) == 0 else '\n'.join(f"–°–æ–æ–±—â–µ–Ω–∏–µ #{i}: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ <code>{x.sent_count}</code> —Ä–∞–∑" for i, x in enumerate(slot.postings))

    await func(f"{slot.emoji} –°–ª–æ—Ç <b>{slot.name}</b> <code>#{slot.id}</code>\n\n"
               f"<b>üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n"
               f"‚ñ´Ô∏è –Æ–∑–µ—Ä–±–æ—Ç–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ: <code>{len(slot.ubots)}</code> —à—Ç.\n"
               f"‚ñ´Ô∏è –ß–∞—Ç–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ: <code>{len(slot.chats)}</code> —à—Ç.\n"
               f"‚ñ´Ô∏è –°–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: <code>{len(slot.postings)}</code> —à—Ç.\n"
               f"‚ñ´Ô∏è –°—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã: <code>{slot.get_verbose_status()}</code>\n\n"
               f"<b>üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</b>\n"
               f"{schdeule_text}\n\n"
               f"<b>üíå –ö–æ–Ω—Ç–µ–Ω—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n"
               f"{postings_text}\n\n", 
               reply_markup=Keyboards.Slots.editSlot(slot))

async def sendSlotsMenu(msg: Message, edit=False):
    func = msg.answer if not edit else msg.edit_text
    slots: AutopostSlot = AutopostSlot.objects.all()
    await func("üóÉÔ∏è –ú–µ–Ω—é —Å–ª–æ—Ç–æ–≤", reply_markup=Keyboards.Slots.main(slots))



        
        
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Ç–∞–º–∏ —Å–ª–æ—Ç–æ–≤
@dp.callback_query_handler(text_contains="|slot_chats", state="*")
async def _(c: CallbackQuery, state: FSMContext, user: TgUser):
    global threads
    actions = c.data.split(":")[1:]
    slot: AutopostSlot = AutopostSlot.objects.get({"_id": actions[1]})

    if actions[0] == "see_chat":
        await c.answer("–û—Ç–ø—Ä–∞–≤–ª—è—é —á–∞—Ç")
        chat_id = int(actions[2])
        chat = slot.chats[str(chat_id)]
        photopath = f"chat_photos/{chat_id}.jpg"
        contains_photo = True

        if not os.path.exists(photopath):
            client: pyrogram.Client = threads[slot.ubots[0].id]['client']
            async with client:
                contains_photo = await download_chat_photo(client, chat_id, photopath)

        msg_text = f"üí¨ –ß–∞—Ç <b>{chat['title']}</b>\n" \
                   f"üîó –°—Å—ã–ª–∫–∞: <b>{'@'+chat['username'] if chat['username'] else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}</b>\n" \
                   f"ü™™ ID: <code>{chat['id']}</code>\n" \
                   f"üìÉ –û–ø–∏—Å–∞–Ω–∏–µ: <code>{chat['bio'] if chat['bio'] else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}</code>\n" \
                   f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: <code>{chat['members_count']}</code>\n" \
                   f"üóØÔ∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–µ–∫–ª–∞–º –≤ —á–∞—Ç: <code>{chat.get('sent_count', 0)}</code>\n"

        if contains_photo:
            await c.message.answer_photo(InputFile(photopath), caption=msg_text,
                                         reply_markup=Keyboards.hide())
        else:
            await c.message.answer(msg_text, reply_markup=Keyboards.hide())

    
    if actions[0] == "add_chat_from_ubot":
        suffix = "" if len(slot.ubots) > 0 else "\n\n‚ö†Ô∏è –ö —Å–ª–æ—Ç—É –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã —é–∑–µ—Ä–±–æ—Ç—ã"
        await c.message.edit_text("üí¨ –í—ã–±–µ—Ä–∏—Ç–µ —é–∑–µ—Ä–±–æ—Ç–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∞—Ç–æ–≤ —Ä–∞—Å—Å—ã–ª–∫–∏" + suffix,
                                  reply_markup=Keyboards.SlotChats.chooseUserbotForSelectChats(slot))
        
    if actions[0] == "select_ubot_chats":
        slot = AutopostSlot.objects.get({"_id": actions[1]})
        ubot = UserbotSession.objects.get({"_id": actions[2]})
        await c.message.edit_text("üí¨ –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è", reply_markup=Keyboards.SlotChats.chooseChatsFromUbot(slot, ubot, {}))
        await state.update_data(suc={})
        
    if actions[0] == "add_chats_with_text":
        await c.message.edit_text("üí¨ –í–≤–µ–¥–∏—Ç–µ –≤—Å–µ CHAT ID —á–∞—Ç–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –≤ —Ä–∞—Å—Å—ã–ª–∫—É, —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö <b>\",\"</b>,<b>\";\"</b>,<b>\" \"</b> –∏–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫–∏",
                                  reply_markup=Keyboards.back(f"|slot_menu:chats:{slot.id}"))
        await state.update_data(editing_slot_id=slot.id)
        await ChangeSlotStates.posting_chats.set()
        
    if actions[0] == "suc":
        slot = AutopostSlot.objects.get({"_id": actions[1]})
        ubot = UserbotSession.objects.get({"_id": actions[2]})
        chat = ubot.chats[actions[3]]
        suc = (await state.get_data()).get('suc', {})
        if str(chat['id']) not in suc:
            suc[str(chat['id'])] = chat
        else:
            del suc[chat['id']]
        #slot.chats[chat['id']] = chat
        await state.update_data(suc=suc)
        await c.message.edit_text("üí¨ –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è", reply_markup=Keyboards.SlotChats.chooseChatsFromUbot(slot, ubot, suc))
        
    if actions[0] == "apply_suc":
        suc = (await state.get_data())['suc']
        slot = AutopostSlot.objects.get({"_id": actions[1]})
        slot.chats.update(suc)
        slot.save()
        await c.message.edit_text("üí¨ –ú–µ–Ω—é –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏",
                                  reply_markup=Keyboards.Slots.seeSlotChats(slot))

 
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤—ã–±–æ—Ä–æ–º —é–∑–µ—Ä–±–æ—Ç–æ–≤
@dp.callback_query_handler(text_contains="|choose_ubots", state="*")
async def _(c: CallbackQuery, state: FSMContext, user: TgUser):
    actions = c.data.split(":")     
    stateData = await state.get_data()
    ubots: list = stateData.get('ubots', [])
    
    if actions[1] == 'done':
        await c.answer()
            
        slot: AutopostSlot = AutopostSlot.objects.get({"_id": stateData['slot_id']})
        slot.ubots = ubots
        slot.save()
        
        await sendSlot(c.message, slot, True)
        await state.finish()
            
        await c.answer()
    else:
        ub_id = c.data.split(':')[2]
        slot: AutopostSlot = None
        if 'slot_id' in stateData:
            slot: AutopostSlot = AutopostSlot.objects.get({"_id": stateData['slot_id']})
        if ub_id in ubots:
            ubots.remove(ub_id)
        else:
            ubots.append(ub_id)
        await state.update_data(ubots=ubots)
        
        userbots = UserbotSession.objects.all()
        await c.message.edit_reply_markup(Keyboards.Slots.chooseUserbots(userbots, ubots, slot))
            
            
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–ª–æ—Ç–∞–º–∏
@dp.callback_query_handler(text_contains="|slot_menu", state="*")
async def _(c: CallbackQuery, state: FSMContext, user: TgUser):
    actions = c.data.split(":")[1:]

    if actions[0] == "delete_slot":
        await c.answer()
        slot: AutopostSlot = AutopostSlot.objects.get({'_id': actions[2]})
        if actions[-1] == "!":
            await c.message.answer(f"üóëÔ∏è –°–ª–æ—Ç <b>{slot.name}</b> <code>#{slot.id}</code> —É–¥–∞–ª—ë–Ω")
            slot.delete()
            await sendSlotsMenu(c.message)
            return
        await c.message.answer(f"–£–¥–ª–∞–∏—Ç—å —Å–ª–æ—Ç <b>{slot.name}</b>‚ùî", reply_markup=Keyboards.Popup(f"|slot_menu:delete_slot:{slot.id}:!"))
        
    if actions[0] == "turn":
        slot: AutopostSlot = AutopostSlot.objects.get({'_id': actions[1]})
        if slot.status != 'banned':
            if slot.status == 'inactive' and len(slot.ubots) == 0:
                await c.answer("üò¢ –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —é–∑–µ—Ä–±–æ—Ç–∞", show_alert=True)
                return
            if slot.status == 'inactive' and len(slot.postings) == 0:
                await c.answer("üò¢ –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏", show_alert=True)
                return
            if slot.status == 'inactive' and len(slot.schedule) == 0:
                await c.answer("üò¢ –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏", show_alert=True)
                return
            slot.status = 'inactive' if slot.status == 'active' else 'active'
            slot.save()
            await sendSlot(c.message, slot, edit=True)
        
    if actions[0] == "schedule":
        slot = AutopostSlot.objects.get({"_id": actions[1]})
        xm = await c.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –≤–∏–¥–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º —á–µ—Ä–µ–∑ <b>\";\"</b> –∏–ª–∏ <b>\" \"</b>\n\n–ü—Ä–∏–º–µ—Ä: <code>10:00-12:00;14:35-15:40;21:00-23:00</code>",
                                  reply_markup=Keyboards.back(f"|slots:see:{slot.id}"))
        await state.update_data(editing_slot_id=slot.id, xm=xm)
        await ChangeSlotStates.schedule.set()
        
    if actions[0] == "chats":
        if state:
            await state.finish()
        slot = AutopostSlot.objects.get({"_id": actions[1]})
        await c.message.edit_text("üí¨ –ú–µ–Ω—é –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏",
                                  reply_markup=Keyboards.SlotChats.seeSlotChats(slot))
        
    if actions[0] == "postings":
        slot = AutopostSlot.objects.get({"_id": actions[1]})
        if actions[-1] == "main":
            await c.message.edit_text("üíå –ú–µ–Ω—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=Keyboards.Slots.postingsMenu(slot))
        if actions[-1] == "add_messages":
            xm = await c.message.edit_text(f"üíå –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è, —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö —Å –ø–æ–º–æ—â—å—é <b>\"#####\"</b>\n"
                                      f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: <code>{Consts.MAX_POSTINGS_IN_SLOT}</code>\n\n"
                                      f"–ü—Ä–∏–º–µ—Ä:\n"
                                      f"<i>–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏!\n"
                                      f"#####\n"
                                      f"–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏!\n"
                                      f"#####\n"
                                      f"–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ —Ç—Ä–µ—Ç—å–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏!\n</i>", reply_markup=Keyboards.Slots.addPostings(slot))
            await state.update_data(editing_slot_id=slot.id, xm=xm)
            await ChangeSlotStates.postings.set()
        if actions[-1] == "see_message":
            message_id = actions[-2]
            slot.postings = [x for x in slot.postings if x.id != message_id]
            slot.save()
            await c.message.answer([x for x in slot.postings if x.id == message_id][0].text, Keyboards.hide())
        if actions[-1] == "del_message":
            message_id = actions[-2]
            slot.postings = [x for x in slot.postings if x.id != message_id]
            slot.save()
            await c.message.edit_text("üíå –ú–µ–Ω—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=Keyboards.Slots.postingsMenu(slot))
        if actions[-1] == "preview_messages":
            await c.answer("üíå –í—ã–≤–æ–¥—è—Ç—Å—è –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è...")
            for posting in slot.postings:
                await c.message.answer(posting.text, reply_markup=Keyboards.hide())
                await asyncio.sleep(0.1)
            
        
    if actions[0] == "ubots":
        slot = AutopostSlot.objects.get({"_id": actions[1]})
        all_userbots = UserbotSession.objects.all()
        await c.message.edit_text("ü§ñ –í—ã–±–µ—Ä–∏—Ç–µ —é–∑–µ—Ä–±–æ—Ç–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —ç—Ç–æ–º —Å–ª–æ—Ç–µ",
                                  reply_markup=Keyboards.Slots.chooseUserbots(all_userbots, slot.ubots, slot))
        await state.update_data(slot_id=slot.id, ubots=slot.ubots)
        await ChangeSlotStates.schedule.set()
                
    if actions[0] == "change":
        slot = AutopostSlot.objects.get({"_id": actions[2]})
        if actions[1] == "name":
            await c.answer()
            xm = await c.message.edit_text(f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ª–æ—Ç–∞:", reply_markup=Keyboards.back(f"|slots:see:{slot.id}"))
            await state.update_data(editing_slot_id=slot.id, xm=xm)
            await ChangeSlotStates.name.set()
        if actions[1] == "logs":
            await c.answer()
            xm = await c.message.edit_text(f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ CHAT ID —á–∞—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∏ –æ—à–∏–±–æ–∫:", reply_markup=Keyboards.back(f"|slots:see:{slot.id}"))
            await state.update_data(editing_slot_id=slot.id, xm=xm)
            await ChangeSlotStates.logsChat.set()
            
            
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–ª–æ—Ç–∞–º–∏
@dp.callback_query_handler(text_contains="|slots", state="*")
async def _(c: CallbackQuery, state: FSMContext, user: TgUser):
    action = c.data.split(":")[1]

    if action == "main":
        if state:
            await state.finish()
        await sendSlotsMenu(c.message, edit=True)

    if action == "new":
        await c.answer()
        slot = AutopostSlot(id=str(uuid4())[:15],
                            owner_id=user.id,
                            name=f"{fake.word().capitalize()}_{fake.word()}",
                            emoji=random.choice(
                                ["üî¥", "üü†", "üü°", "üü¢", "üîµ", "üü£", "üü§", "‚ö´", "‚ö™", "üü†"])
                            )
        slot.save()

        slots: AutopostSlot = AutopostSlot.objects.all()
        await c.message.edit_text("üóÉÔ∏è –ú–µ–Ω—é —Å–ª–æ—Ç–æ–≤", reply_markup=Keyboards.Slots.main(slots))

    if action == "see":
        if state:
            await state.finish()
        slot: AutopostSlot = AutopostSlot.objects.get(
            {'_id': c.data.split(':')[2]})
        await sendSlot(c.message, slot, True)


@dp.message_handler(state=ChangeSlotStates.name)
async def _(message: types.Message, state: FSMContext):
    val = message.text
    stateData = await state.get_data()
    
    slot: AutopostSlot = AutopostSlot.objects.raw(
        {"_id": stateData['editing_slot_id']}).first()
    slot.name = val
    slot.save()

    await stateData['xm'].edit_text(f"‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ <code>{message.text}</code>!")
    await message.delete()

    await sendSlot(message, slot)
    await state.finish()


@dp.message_handler(state=ChangeSlotStates.logsChat)
async def _(message: types.Message, state: FSMContext):
    val = message.text
    stateData = await state.get_data()
    
    
    if not val.replace('-', '').isdigit():
        await message.answer("‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
        return
    
    slot: AutopostSlot = AutopostSlot.objects.raw(
        {"_id": stateData['editing_slot_id']}).first()
    slot.reports_group_id = int(val)
    slot.save()

    await stateData['xm'].edit_text(f"‚úÖ CHAT ID —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ <code>{message.text}</code>!")
    await message.delete()

    await sendSlot(message, slot)
    await state.finish()



@dp.message_handler(state=ChangeSlotStates.postings)
async def _(message: types.Message, state: FSMContext):
    val = message.html_text
    stateData = await state.get_data()
    slot: AutopostSlot = AutopostSlot.objects.raw(
        {"_id": stateData['editing_slot_id']}).first()
    
    if not check_html_tags(val):
        await message.answer("‚ùó –í–Ω–∏–º–∞–Ω–∏–µ! –ù–∞—Ä—É—à–µ–Ω—ã —Ç–µ–≥–∏ –≤ —Ç–µ–∫—Å—Ç–µ. –ù–∏ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ", reply_markup=Keyboards.back(f"|slot_menu:postings:{slot.id}:main"))
        return
    last_id = int(slot.postings[-1].id) if slot.postings else -1
    messages_for_adding = [dict(id=str(i + last_id + 1), text=msg_text, sent_count=0) for i, msg_text in enumerate(val.split('#####'))]
    slot.postings = slot.postings + messages_for_adding
    slot.postings = slot.postings[:Consts.MAX_POSTINGS_IN_SLOT]
    slot.save()

    await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
    await message.answer("üíå –ú–µ–Ω—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=Keyboards.Slots.postingsMenu(slot))
    await state.finish()
    await stateData['xm'].delete()



@dp.message_handler(state=ChangeSlotStates.schedule)
async def _(message: types.Message, state: FSMContext):
    val = message.text
    stateData = await state.get_data()
    
    slot: AutopostSlot = AutopostSlot.objects.raw(
        {"_id": stateData['editing_slot_id']}).first()
    
    slot.schedule = [dict(min=x.split('-')[0], max=x.split('-')[1]) for x in val.replace(';', ' ').replace('  ', ' ').strip().split()]
    slot.save()

    await stateData['xm'].edit_text(f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ <code>{val}</code>!")
    await message.delete()

    await sendSlot(message, slot)
    await state.finish()



@dp.message_handler(state=ChangeSlotStates.posting_chats)
async def _(message: types.Message, state: FSMContext):
    global threads
    chat_ids = message.text.replace('\n', ' ').replace(';', ' ').replace(',', ' ').replace('  ', ' ').split()
    stateData = await state.get_data()
    
    slot: AutopostSlot = AutopostSlot.objects.raw(
        {"_id": stateData['editing_slot_id']}).first()
    counter = 0
    for chat_id in chat_ids:
        if chat_id in slot.chats:
            await message.answer(f"‚ö†Ô∏è –ß–∞—Ç <code>{chat_id}</code> –±—ã–ª —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤" )
            continue
        for ubot in slot.ubots:
            ubot: UserbotSession = ubot
            client: pyrogram.Client = threads[ubot.id]['client']
            chat = await client.get_chat(chat_id)
            if chat is None:
                await message.answer(f"‚ö†Ô∏è –ß–∞—Ç <code>{chat_id}</code> –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω —É —é–∑–µ—Ä–±–æ—Ç–∞ <code>{ubot.name}</code> | <code>{ubot.login}</code>, —á–∞—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω")
                continue
            if chat is None:
                await message.answer(f"‚ö†Ô∏è –í —á–∞—Ç–µ <code>{chat_id}</code> —é–∑–µ—Ä–±–æ—Ç <code>{ubot.name}</code> | <code>{ubot.login}</code> –Ω–µ –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, —á–∞—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω")
                continue
            slot.chats[str(chat.id)] = json.loads(json.dumps(chat.__dict__, ensure_ascii=False, default=str))
            counter += 1
    await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {counter} —á–∞—Ç–æ–≤!")
    slot.save()
            
    await message.answer("üí¨ –ú–µ–Ω—é –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏",
                                  reply_markup=Keyboards.Slots.seeSlotChats(slot))
    await state.finish()
